// No arguments

>>> foobar()
let foobar: Action<>
foobar()

// Only boolean arguments

>>> foobar (true)
let foobar: Action<Boolean>
foobar(true)

>>> foobar (true, false)
let foobar: Action<Boolean, Boolean>
foobar(true, false)

>>> foobar (true, false, false)
let foobar: Action<Boolean, Boolean, Boolean>
foobar(true, false, false)

>>> foobar (true, false, false, true)
let foobar: Action<Boolean, Boolean, Boolean, Boolean>
foobar(true, false, false, true)

// Only number arguments

>>> foobar (1)
let foobar: Action<Number>
foobar(1.0)

>>> foobar (1, 2)
let foobar: Action<Number, Number>
foobar(1.0, 2.0)

>>> foobar (1, 2, 3)
let foobar: Action<Number, Number, Number>
foobar(1.0, 2.0, 3.0)

>>> foobar (1, 2, 3, 4)
let foobar: Action<Number, Number, Number, Number>
foobar(1.0, 2.0, 3.0, 4.0)

// Only string arguments

>>> foobar("1")
let foobar: Action<String>
foobar("1")

>>> foobar("1", "2")
let foobar: Action<String, String>
foobar("1", "2")

>>> foobar("1", "2", "3")
let foobar: Action<String, String, String>
foobar("1", "2", "3")

>>> foobar("1", "2", "3", "4")
let foobar: Action<String, String, String, String>
foobar("1", "2", "3", "4")

// Actions can be referenced more than once, but each use must have the same
// types.

>>> foobar(1)
>>> foobar(1)
let foobar: Action<Number>
foobar(1.0)
foobar(1.0)

>>> foobar("1")
>>> foobar(1)
2:7:
  |
2 | foobar(1)
  |       ^
unexpected '('
expecting '+', ':', '=', identifier character, or variable character

>>> let foobar: Action<>
>>> foobar()
let foobar: Action<>
foobar()

>>> let foobar: Action<>
>>> foobar(1)
2:7:
  |
2 | foobar(1)
  |       ^
unexpected '('
expecting '+', ':', '=', identifier character, or variable character

// Variables used in an expression have to have a known type.

>>> let number: Number
>>> foobar(number)
let foobar: Action<Number>
let number: Number
foobar(number)

>>> foobar(foo)
1:8:
  |
1 | foobar(foo)
  |        ^^^
Cannot infer type of the variable `foo`.

>>> foobar(foo, bar, baz)
1:8:
  |
1 | foobar(foo, bar, baz)
  |        ^^^
Cannot infer type of the variable `foo`.

// You can't use an action name as a variable, or vice-versa

>>> let foobar: Number
>>> foobar()
2:7:
  |
2 | foobar()
  |       ^
unexpected '('
expecting '+', ':', '=', identifier character, or variable character

>>> let action: Action<>
>>> foobar(action)
let action: Action<>
let foobar: Action<Action<>>
foobar(action)

// No spaces are okay.

>>> foobar("1","2")
let foobar: Action<String, String>
foobar("1", "2")

>>> foobar("1","2","3")
let foobar: Action<String, String, String>
foobar("1", "2", "3")

>>> foobar("1","2","3","4")
let foobar: Action<String, String, String, String>
foobar("1", "2", "3", "4")

// Extra spaces are okay.

>>> foobar  (  )
let foobar: Action<>
foobar()

>>> foobar  (  "1"  )
let foobar: Action<String>
foobar("1")

>>> foobar  (  "1"  ,  "2"  )
let foobar: Action<String, String>
foobar("1", "2")

>>> foobar  (  "1"  ,  "2"  ,  "3"  )
let foobar: Action<String, String, String>
foobar("1", "2", "3")

>>> foobar  (  "1"  ,  "2"  ,  "3"  ,  "4"  )
let foobar: Action<String, String, String, String>
foobar("1", "2", "3", "4")

// Extra newlines are okay.

>>> foobar  (
>>> )
let foobar: Action<>
foobar()

>>> foobar  (
>>> "1"
>>> )
let foobar: Action<String>
foobar("1")

>>> foobar  (
>>> "1",
>>> "2"
>>> )
let foobar: Action<String, String>
foobar("1", "2")

>>> foobar  (
>>> "1"
>>> ,
>>> "2"
>>> ,
>>> "3"
>>> )
let foobar: Action<String, String, String>
foobar("1", "2", "3")

>>> foobar  (
>>> "1"
>>> ,
>>> "2"
>>> ,
>>> "3"
>>> ,
>>> "4"
>>> )
let foobar: Action<String, String, String, String>
foobar("1", "2", "3", "4")

// Both parenthesis must be provided.

>>> foobar(  
1:10:
  |
1 | foobar(  
  |          ^
unexpected end of input
expecting close parenthesis or expression

>>> foobar)
1:7:
  |
1 | foobar)
  |       ^
unexpected ')'
expecting '+', ':', '=', identifier character, open parenthesis, or variable character

// Functions cannot start with a number.

>>> 123()
1:4:
  |
1 | 123()
  |    ^
unexpected '('
expecting '+', ':', or identifier character
